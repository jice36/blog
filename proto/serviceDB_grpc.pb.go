// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: serviceDB.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceDBClient is the client API for ServiceDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceDBClient interface {
	GetNotes(ctx context.Context, in *RequestGet, opts ...grpc.CallOption) (*ResponseGet, error)
	SendNote(ctx context.Context, in *RequestSend, opts ...grpc.CallOption) (*ResponseSend, error)
}

type serviceDBClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDBClient(cc grpc.ClientConnInterface) ServiceDBClient {
	return &serviceDBClient{cc}
}

func (c *serviceDBClient) GetNotes(ctx context.Context, in *RequestGet, opts ...grpc.CallOption) (*ResponseGet, error) {
	out := new(ResponseGet)
	err := c.cc.Invoke(ctx, "/bd.ServiceDB/GetNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDBClient) SendNote(ctx context.Context, in *RequestSend, opts ...grpc.CallOption) (*ResponseSend, error) {
	out := new(ResponseSend)
	err := c.cc.Invoke(ctx, "/bd.ServiceDB/SendNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDBServer is the server API for ServiceDB service.
// All implementations must embed UnimplementedServiceDBServer
// for forward compatibility
type ServiceDBServer interface {
	GetNotes(context.Context, *RequestGet) (*ResponseGet, error)
	SendNote(context.Context, *RequestSend) (*ResponseSend, error)
	mustEmbedUnimplementedServiceDBServer()
}

// UnimplementedServiceDBServer must be embedded to have forward compatible implementations.
type UnimplementedServiceDBServer struct {
}

func (UnimplementedServiceDBServer) GetNotes(context.Context, *RequestGet) (*ResponseGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotes not implemented")
}
func (UnimplementedServiceDBServer) SendNote(context.Context, *RequestSend) (*ResponseSend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNote not implemented")
}
func (UnimplementedServiceDBServer) mustEmbedUnimplementedServiceDBServer() {}

// UnsafeServiceDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceDBServer will
// result in compilation errors.
type UnsafeServiceDBServer interface {
	mustEmbedUnimplementedServiceDBServer()
}

func RegisterServiceDBServer(s grpc.ServiceRegistrar, srv ServiceDBServer) {
	s.RegisterService(&ServiceDB_ServiceDesc, srv)
}

func _ServiceDB_GetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDBServer).GetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bd.ServiceDB/GetNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDBServer).GetNotes(ctx, req.(*RequestGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDB_SendNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDBServer).SendNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bd.ServiceDB/SendNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDBServer).SendNote(ctx, req.(*RequestSend))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceDB_ServiceDesc is the grpc.ServiceDesc for ServiceDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bd.ServiceDB",
	HandlerType: (*ServiceDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotes",
			Handler:    _ServiceDB_GetNotes_Handler,
		},
		{
			MethodName: "SendNote",
			Handler:    _ServiceDB_SendNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serviceDB.proto",
}
